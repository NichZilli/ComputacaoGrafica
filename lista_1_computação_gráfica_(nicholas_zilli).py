# -*- coding: utf-8 -*-
"""Lista 1 - Computação Gráfica (Nicholas Zilli).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jfccfIx2-npSdc5aWDCwDxbNVqMeVVAQ

1. Ler uma imagem colorida e obter informações de dimensões, forma e tipo dos dados.
"""

import cv2
import numpy as np

img_caminho = '/content/python-logo-master-v3-TM-flattened.png'
img = cv2.imread(img_caminho)
altura = np.size(img, 0)
largura = np.size(img, 1)
print("Dimensões da Imagem -> \nAltura: " + str(altura) + "\nLargura: " + str(largura))
print("\nForma da Imagem: " + str(img.shape))
print("\nTipo dos Dados da Imagem: " + str(img.dtype))

"""2. Plotar uma linha de varredura da imagem usando matplotlib."""

import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow

plt.imshow(img, cmap='Blues')

"""3. Criar uma cópia da imagem usando a biblioteca numpy."""

img_copia = np.copy(img)
cv2_imshow(img_copia)

"""4. Converter a cópia da imagem para imagem em tons de cinza utilizando recursos do numpy e python (slices). Não é para utilizar a função imread neste exercício."""

azul = img_copia[:,:,0]
verde = img_copia[:,:,1]
vermelho = img_copia[:,:,2]

# Nesta divisão feita, qualquer uma das variáveis impressas irá gerar uma
# imagem na cor cinza, a diferença está nos tons que ela realça.

cv2_imshow(verde)

"""5. Selecione uma região da imagem e coloque os pixels na cor verde."""

img_verde = np.copy(img)
img_verde[0:50, 0:50, :] = (0, 255, 0)
cv2_imshow(img_verde)

"""6. Selecione outra região da imagem colorida e coloque os pixels em tons de cinza sem realizar a conversão."""

img_cinza = np.copy(img)
img_cinza[0:1000, 0:90, :] = (100, 100, 100)
cv2_imshow(img_cinza)

"""7. Leve uma imagem em 256 tons de cinza e aplique a quantização para os seguintes níveis de cinza: 128, 64, 32, 16, 8, 4 e 2. 

  Utilize a função uint8() da biblioteca numpy para realizar divisão inteira.
"""

img_copia = cv2.imread('/content/python-logo-master-v3-TM-flattened.png', 0)
cv2_imshow(img_copia)

tons_cinza = [128, 64, 32, 16, 8, 4, 2]
for i in tons_cinza:
  print("Níveis de Cinza: " + str(i))
  cv2_imshow(np.uint8(img_copia/i) * i)

"""8. Leia uma imagem colorida e aplique a quantização igualmente para os canais R, G, e B considerando os seguintes níveis: 128, 64, 32, 16, 8, 4, 2. 

  Utilize a função *repeat* da biblioteca numpy para auxiliar na resolução da 
  atividade.
"""

img_copia = np.copy(img)
cv2_imshow(img_copia)

img_azul = img_copia[:,:,0]
img_verde = img_copia[:,:,1]
img_vermelho = img_copia[:,:,2]

tons_cinza = [128, 64, 32, 16, 8, 4, 2]
for i in tons_cinza:
  print("Níveis de Cinza: " + str(i))
  print("Vermelho: ")
  cv2_imshow( np.uint8(img_vermelho/i)*i)
  print("Verde: ")
  cv2_imshow( np.uint8(img_verde/i)*i)
  print("Azul: ")
  cv2_imshow( np.uint8(img_azul/i)*i)

"""9. Leia uma imagem em 256 tons de cinza e aplique a amostragem com os seguintes fatores de redução: 2, 4 e 8. Utilize a função *repeat* da biblioteca numpy    para auxiliar na resolução da atividade. """

img_copia = cv2.imread('/content/python-logo-master-v3-TM-flattened.png', 0)
cv2_imshow(img_copia)

print("Reducao -> 2")
cv2_imshow(np.repeat(img_copia, 2, axis=0))
cv2_imshow(np.repeat(img_copia, 2, axis=1))
print("Reducao -> 4")
cv2_imshow(np.repeat(img_copia, 4, axis=0))
cv2_imshow(np.repeat(img_copia, 4, axis=1))
print("Reducao -> 8")
cv2_imshow(np.repeat(img_copia, 8, axis=0))
cv2_imshow(np.repeat(img_copia, 8, axis=1))